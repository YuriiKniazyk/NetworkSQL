{"ast":null,"code":"import _defineProperty from \"D:\\\\Web\\\\Project to Work__Git_Hub\\\\SocialNetwork_SQL+React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { REGISTER } from \"../action-types\";\nconst initialState = {\n  name: '',\n  surname: '',\n  email: '',\n  password: ''\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case REGISTER:\n      let handleChange = event => {\n        const _event$target = event.target,\n              name = _event$target.name,\n              value = _event$target.value;\n        this.setState({\n          [name]: value\n        });\n      };\n\n      return _objectSpread({}, state, {\n        handleChange\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:\\Web\\Project to Work__Git_Hub\\SocialNetwork_SQL+React\\my-app\\src\\reducer\\index.js"],"names":["REGISTER","initialState","name","surname","email","password","state","action","type","handleChange","event","target","value","setState"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,QAAQ,EAAE;AAJO,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,QAAL;AACI,UAAIS,YAAY,GAAIC,KAAD,IAAW;AAAA,8BACFA,KAAK,CAACC,MADJ;AAAA,cAClBT,IADkB,iBAClBA,IADkB;AAAA,cACZU,KADY,iBACZA,KADY;AAE1B,aAAKC,QAAL,CAAc;AACV,WAACX,IAAD,GAAQU;AADE,SAAd;AAGH,OALD;;AAMJ,+BAAWN,KAAX;AAAkBG,QAAAA;AAAlB;;AAIA;AAAS,aAAOH,KAAP;AAZb;AAcH,CAfD","sourcesContent":["import { REGISTER } from \"../action-types\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: ''\r\n}; \r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type){\r\n        case REGISTER: \r\n            let handleChange = (event) => {\r\n                const { name, value } = event.target;\r\n                this.setState({\r\n                    [name]: value\r\n                });\r\n            }\r\n        return {...state, handleChange }\r\n\r\n\r\n\r\n        default: return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}